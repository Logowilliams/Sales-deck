rename(`Total Customer Item Return` = `Return Units`)-> online_clean
#remove time from date field
online_clean$WeekStart <- as.Date(online_clean$WeekStart)
online_clean$WeekEnd <- as.Date(online_clean$WeekEnd)
#Create Online Data for skuByStore Merge
online_clean%>%
mutate(Gross_Unit = `POS Qty`*`Total Customer Item Return`)%>%
mutate(GrossPOS = Gross_Unit*(`POS Sales`/`POS Qty`))%>%
rename(Return_Unit = `Total Customer Item Return`)%>%
rename(Net_Sales = `POS Sales`)%>%
rename(Net_Unit = `POS Qty`)%>%
dplyr::select(WeekStart, `WM Week`, WeekEnd, `Store Nbr`, `Item Nbr`, UPC, Net_Unit, Net_Sales, Gross_Unit, Return_Unit, `Curr Str On Hand Qty`,
`Curr Instock %`, `Curr Str On Order Qty`, `Curr Str In Transit Qty`, GrossPOS) -> skuByOnline
#replace missing/infinite values with 0
skuByOnline$GrossPOS[is.na(skuByOnline$GrossPOS)] <- 0
skuByOnline$GrossPOS[is.infinite(skuByOnline$GrossPOS)] <- 0
#create column index
cols.num <- c(3,4,9:13, 15,16)
#prep for merge, make sure columns have same class
sales_pvt[cols.num] <- sapply(sales_pvt[cols.num],as.numeric)
sales_pvt[7] <- sapply(sales_pvt[7],as.character)
online_clean[cols.num] <- sapply(online_clean[cols.num],as.numeric)
online_clean$`Vendor Stk Nbr`<- as.character(online_clean$`Vendor Stk Nbr`)
#merge
tot_sales <- bind_rows(sales_pvt, online_clean)
#prep data for merge
skuByOnline[c(2,4)] <- sapply(skuByOnline[c(2,4)],as.character)
#Merge Store by Sku and Online by Sku
skuByStoreClean <- bind_rows(skuByStore,skuByOnline)
#create column index
cols.num.inv <- c(1,5,7:14)
#prep for merge, make sure columns have same class
inventory[cols.num.inv] <- sapply(inventory[cols.num.inv],as.numeric)
inventory%>%
group_by(`WM Week`, `Brand Desc`, `Vendor Stk Nbr`, `Item Nbr`, `Item Flags`, `UPC`)%>%
summarise()
#create in store inv
inventory%>%
rename(WMT = `Item Nbr`)%>%
group_by(WMT)%>%
summarise(`Curr Str On Hand Qty` = sum(`Curr Str On Hand Qty`))->store_oh
#check for missing SKUs
missingSkus <- c()
for(line in store_oh$WMT){
if(line %in% store_inv_sku$WMT){
#nothing
}else{
missingSkus <- c(missingSkus, line)
newSku <- data.frame()
}
}
#
for (value in missingSkus) {
store_oh%>%
filter(WMT == value)%>%
dplyr::select(WMT)-> skuSub
newSku <- bind_rows(newSku, skuSub)
}
if(length(missingSkus) > 0){
write.xlsx(newSku, here("data", "newStoreSKU.xlsx", sep = ""), overwrite = TRUE)
{stop(length(missingSkus), " new SKU values! Copy new SKUs to store_inv_sku.xlsx and rerun code")}
}
#merge with WMT# inv reference data
store_inv_sku$WMT <- as.character(store_inv_sku$WMT)
store_inv <- left_join(store_inv_sku, store_oh, by = "WMT")
#Replace NA with 0
store_inv$`Curr Str On Hand Qty`[is.na(store_inv$`Curr Str On Hand Qty`)] <- 0
#repeat for online inventory
online%>%
rename(WMT = `WM_ITEM_NUMBER (Dotcom)`)%>%
rename(`Curr Str On Hand Qty` = OH)%>%
select(WMT, `Curr Str On Hand Qty`)->online_oh
online_oh$WMT <- gsub("[[:space:]]", "", online_oh$WMT)
online_oh$WMT <- as.numeric(online_oh$WMT)
#check for missing SKUs
missingSkus <- c()
for(line in online_oh$WMT){
if(line %in% online_inv_sku$WMT){
#nothing
}else{
missingSkus <- c(missingSkus, line)
newSku <- data.frame()
}
}
#
for (value in missingSkus) {
online_oh%>%
filter(WMT == value)%>%
dplyr::select(WMT)-> skuSub
newSku <- bind_rows(newSku, skuSub)
}
if(length(missingSkus) > 0){
write.xlsx(newSku, here("data", "newInvSKU.xlsx", sep = ""), overwrite = TRUE)
{stop(length(missingSkus), " new SKU values! Copy new SKUs to online_inv_sku.xlsx from newInvSKU.xlsx and rerun code")}
}
online_inv <- left_join(online_inv_sku, online_oh, by = "WMT")
online_inv$`Curr Str On Hand Qty`[is.na(online_inv$`Curr Str On Hand Qty`)] <- 0
#merge data
online_inv$WMT <- as.character(online_inv$WMT)
inv_tot <- bind_rows(store_inv, online_inv)
#create gross_unit by WMT# data
tot_sales%>%
mutate(gross_unit = `POS Qty`+`Total Customer Item Return`)%>%
rename(WMT = `Item Nbr`)%>%
select(WMT, gross_unit, `Store Nbr`) -> sku_month
for (storeType in c(0,99999)) {
checkSku <- filter(sku_month, `Store Nbr` == storeType)
#check for missing SKUs
missingSkus <- c()
for(line in checkSku$WMT){
line <- str_trim(line)
if(line %in% store_sales_sku$WMT){
#nothing
}else{
missingSkus <- c(missingSkus, line)
newSku <- data.frame()
}
}
#
for (value in missingSkus) {
checkSku%>%
filter(WMT == value)-> skuSub
newSku <- bind_rows(newSku, skuSub)
}
if(length(missingSkus) > 0){
write.xlsx(newSku, here("data", "newSalesSKU.xlsx", sep = ""), overwrite = TRUE)
{stop(length(missingSkus), " new SKU values in store ", storeType, "! Copy new SKUs from newSalesSKU.xlsx to store_sales_sku.xlsx and rerun code")}
}
}
store_sales_sku$WMT <- as.character(store_sales_sku$WMT)
#merge with WMT# sales reference data
tot_sales_sku <- left_join(store_sales_sku, sku_month, by = "WMT")
#Replace NA with 0
tot_sales_sku$gross_unit[is.na(tot_sales_sku$gross_unit)] <- 0
# Create a blank workbook
store_wb <- createWorkbook()
# Add some sheets to the workbook
addWorksheet(store_wb, "Sales")
addWorksheet(store_wb, "Pivot")
addWorksheet(store_wb, "Raw Data")
addWorksheet(store_wb, "Inventory")
addWorksheet(store_wb, "Store Data")
addWorksheet(store_wb, "SKU Inv Monthly")
addWorksheet(store_wb, "SKU Monthly")
addWorksheet(store_wb, "SKU by Store")
# Write the data to the sheets
writeData(store_wb, sheet = "Sales", x = tot_sales)
writeData(store_wb, sheet = "Pivot", x = sales_pvt)
writeData(store_wb, sheet = "Raw Data", x = raw_store)
writeData(store_wb, sheet = "Inventory", x = inventory)
writeData(store_wb, sheet = "Store Data", x = salesByStore)
writeData(store_wb, sheet = "SKU Inv Monthly", x = inv_tot)
writeData(store_wb, sheet = "SKU Monthly", x = tot_sales_sku)
writeData(store_wb, sheet = "SKU by Store", x = skuByStoreClean)
# Export the file
saveWorkbook(store_wb, here("results", params$year, month, paste("Week", params$wk, sep = ""), paste("Google Weekly Recap (Stores) - Week ", params$wk, ".xlsx", sep = "")), overwrite = TRUE)
# Create a blank workbook
online_wb <- createWorkbook()
# Add some sheets to the workbook
addWorksheet(online_wb, "Chromebooks")
addWorksheet(online_wb, "Sales")
# Write the data to the sheets
writeData(online_wb, sheet = "Chromebooks", x = online)
writeData(online_wb, sheet = "Sales", x = online_clean)
# Export the file
saveWorkbook(online_wb, here("results", params$year, month, paste("Week", params$wk, sep = ""), paste("Google Weekly Recap (dotcom) - Week ", params$wk, ".xlsx", sep = "")), overwrite = TRUE)
#Merge Online w/SKU Level Sales by store
onlineTransformed%>%
rename(`Item Nbr` = `WM_ITEM_NUMBER (Dotcom)`)%>%
rename(UPC = WUPC)%>%
rename(Net_Unit = `Net Units`)%>%
rename(Net_Sales = `POS Sales`)%>%
rename(Return_Unit = `Return Units`)-> onlineSalesBySku
onlineSalesBySku%>%
mutate(Gross_Unit = Net_Unit+Return_Unit)%>%
mutate(NetASP = Net_Sales/Net_Unit)%>%
mutate(GrossPOS = Gross_Unit*NetASP) -> onlineSalesBySku
onlineSalesBySku$GrossPOS[is.na(onlineSalesBySku$GrossPOS)] <- 0
onlineSalesBySku$GrossPOS[is.infinite(onlineSalesBySku$GrossPOS)] <- 0
onlineSalesBySku <- dplyr::select(onlineSalesBySku, `WM Week`, WeekEnd, `Store Nbr`, `Item Nbr`, UPC, Net_Unit, Net_Sales, Gross_Unit, Return_Unit,`Curr Str On Hand Qty`, `Curr Instock %`, `Curr Str On Order Qty`, `Curr Str In Transit Qty`, GrossPOS)
onlineSalesBySku$`WM Week` <- as.character(onlineSalesBySku$`WM Week`)
onlineSalesBySku$`Store Nbr` <- as.character(onlineSalesBySku$`Store Nbr`)
skuByStoreBind <- dplyr::select(skuByStore, -WeekStart)
weeklySales <- bind_rows(skuByStoreBind, onlineSalesBySku)
skuLevelStorelist <- dplyr::select(storelist, StoreNumber, PilotStoreType, Region, Market, Pair)
weeklySales <- left_join(weeklySales, skuLevelStorelist, by = c("Store Nbr" = "StoreNumber"))
#Upload To Monthly Tracker
lastWeekData <- read_sheet(params$monthlyTracker, "Weekly Sales")
if(is.na(unique(lastWeekData$`WM Week`))){
print("Sheet is empty")}else if (unique(lastWeekData$`WM Week`) != this_week$`WM Week`){
write_sheet(lastWeekData, params$monthlyTracker, "Previous Week Sales")
}
#load dependencies
library(openxlsx)   #tools for saving xls data
library(readxl)     #load xlsx data
library(dplyr)      #tools for cleaning data
library(here)       #file path management
library(janitor)    #row to colheader conversion
library(lubridate)  #date/time manipulation
library(scales)     #percent format
library(zoo)        #handle infinite values
library(stringr)    #remove whitespaces
library(googlesheets4) #update google sheets
storelist <- read_excel(here("data/base_data/storelist.xlsx"))
storelist$StoreNumber <- as.character(storelist$StoreNumber)
#load Walmart Week data
weeks <- read_excel(here("data", params$year, "Walmart Weeks.xlsx"))
#filter for current week
if(params$wk < 10){
this_week <- filter(weeks, `WM Week` == paste(params$year, 0, params$wk, sep = ""))
}else if(params$wk > 48){
this_week <- filter(weeks, `WM Week` == paste(params$year-1, params$wk, sep = ""))
}else{
this_week <- filter(weeks, `WM Week` == paste(params$year, params$wk, sep = ""))
}
#get current month for file paths
month <- params$month
#load UPC data for monthly SKU tracker
online_inv_sku <- read_excel(here("data/base_data/online_inv_sku.xlsx"))
store_inv_sku <- read_excel(here("data/base_data/store_inv_sku.xlsx"))
store_sales_sku <- read_excel(here("data/base_data/store_sales_sku.xlsx"))
# Create results folder path for current week
here::here()
dir.create(getwd())
dir.create(here::here(file.path("results", params$year)))
dir.create(here::here(file.path("results", params$year, month)))
dir.create(here::here(file.path("results", params$year, month, paste("Week", params$wk, sep = ""))))
#load data
raw_store <- read_excel(here("data", params$year, month, paste("Week", params$wk, sep = ""), "store.xlsx"), sheet = 1)
#remove empty rows
store <- raw_store[!is.na(raw_store[1]),]
#add first row as column headers
store <- janitor::row_to_names(store, 1)
#separate data between inventory and this weeks sales
if(params$wk < 10){
inventory <- filter(store, `WM Week` == paste(params$year, 0,params$wk+1, sep = ""))
sales <- filter(store, `WM Week` == paste(params$year, 0, params$wk, sep = ""))
}else if(params$wk >= 48){
inventory <- filter(store, `WM Week` == paste(params$year-1, params$wk+1, sep = ""))
sales <- filter(store, `WM Week` == paste(params$year-1, params$wk, sep = ""))
}else{
inventory <- filter(store, `WM Week` == paste(params$year, params$wk+1, sep = ""))
sales <- filter(store, `WM Week` == paste(params$year, params$wk, sep = ""))
}
#transform sales data to numeric to prep for summarise
sales$`POS Qty` <- as.numeric(sales$`POS Qty`)
sales$`POS Sales` <- as.numeric(sales$`POS Sales`)
sales$`Total Customer Item Return` <- as.numeric(sales$`Total Customer Item Return`)
#create pivot table
sales%>%
group_by(`WM Week`, `Brand Desc`, `Vendor Stk Nbr`, `Item Nbr`, `Item Flags`, `UPC`)%>%
summarise(`POS Qty` = sum(`POS Qty`), `POS Sales` = sum(`POS Sales`), `Total Customer Item Return` = sum(`Total Customer Item Return`)) -> sales_pvt
#enter blank values for Item Flags
sales_pvt$`Item Flags` <- ""
#add week end/start, store nbr, and Curr columns
sales_pvt%>%
mutate(WeekStart = this_week$WeekStart, .before = `WM Week`)%>%
mutate(WeekEnd = this_week$WeekEnd, .before = `WM Week`)%>%
mutate(`Store Nbr` = 0, .after = `WM Week`)%>%
mutate(`Curr Str On Hand Qty` = 0)%>%
mutate(`Curr Instock %` = 0)%>%
mutate(`Curr Str On Order Qty` = 0)%>%
mutate(`Curr Str In Transit Qty` = 0)-> sales_pvt
#remove time from date field
sales_pvt$WeekStart <- as.Date(sales_pvt$WeekStart)
sales_pvt$WeekEnd <- as.Date(sales_pvt$WeekEnd)
#create pivot table
sales%>%
mutate(GrossUnit = `POS Qty`+`Total Customer Item Return`)%>%
group_by(`WM Week`, `Store Nbr`, `Item Nbr`, `UPC`)%>%
summarise(Net_Unit = sum(`POS Qty`), Net_Sales = sum(`POS Sales`), Gross_Unit = sum(GrossUnit), Return_Unit = sum(`Total Customer Item Return`), GrossPOS = sum(Gross_Unit*(Net_Sales/Net_Unit)))->skuByStore
#replace missing/infinite values with 0
skuByStore$GrossPOS[is.na(skuByStore$GrossPOS)] <- 0
skuByStore$GrossPOS[is.infinite(skuByStore$GrossPOS)] <- 0
#add week end/start, store nbr, and Curr columns
skuByStore%>%
mutate(WeekStart = this_week$WeekStart, .before = `WM Week`)%>%
mutate(WeekEnd = this_week$WeekEnd, .after = `WM Week`)%>%
mutate(`Curr Str On Hand Qty` = 0, .before = GrossPOS)%>%
mutate(`Curr Instock %` = 0, .after = `Curr Str On Hand Qty`)%>%
mutate(`Curr Str On Order Qty` = 0, .after = `Curr Instock %`)%>%
mutate(`Curr Str In Transit Qty` = 0, .after = `Curr Str On Order Qty`)%>%
dplyr::select(WeekStart, `WM Week`, WeekEnd, `Store Nbr`, `Item Nbr`, UPC, Net_Unit, Net_Sales, Gross_Unit, Return_Unit, `Curr Str On Hand Qty`,
`Curr Instock %`, `Curr Str On Order Qty`, `Curr Str In Transit Qty`, GrossPOS)-> skuByStore
#remove time from date field
skuByStore$WeekStart <- as.Date(skuByStore$WeekStart)
skuByStore$WeekEnd <- as.Date(skuByStore$WeekEnd)
#create pivot table
sales%>%
mutate(WeekEnd = this_week$WeekEnd, .after = `WM Week`) -> salesByStore
skuByStore%>%
group_by(`WM Week`, WeekEnd, `Store Nbr`)%>%
summarise(POS_Unit = sum(Net_Unit), POS_Sales = sum(Net_Sales), Gross_Unit = sum(Gross_Unit), Gross_POS = sum(GrossPOS), Return_Unit = sum(Return_Unit))->salesByStore
#load online data
online <- read_excel(here("data", params$year, month, paste("Week", params$wk, sep = ""), "online.xlsx"))
#add POS Sales column
online <- mutate(online, `POS Sales` = `Average Unit Retail`*`Net Units`)
#Rename columns, mutate columns to perform calculations
online%>%
mutate(WeekStart = this_week$WeekStart)%>%
mutate(WeekEnd = this_week$WeekEnd)%>%
mutate(`Store Nbr` = 99999)%>%
mutate(`WM Week` = this_week$`WM Week`)%>%
mutate(`POS Sales` = `Average Unit Retail`*`Net Units`)%>%
mutate(`Curr Str On Hand Qty` = 0)%>%
mutate(`Curr Instock %` = 0)%>%
mutate(`Curr Str On Order Qty` = 0)%>%
mutate(`Curr Str In Transit Qty` = 0)%>%
mutate(`Item Flags` = "")%>%
select(WeekStart, WeekEnd, `WM Week`, `Store Nbr`, `BRAND_NAME`, `CATLG_ITEM_ID`, `WM_ITEM_NUMBER (Dotcom)`, `Item Flags`, WUPC, `Net Units`, `POS Sales`, `Return Units`, `Curr Str On Hand Qty`, `Curr Instock %`, `Curr Str On Order Qty`, `Curr Str In Transit Qty`)-> onlineTransformed
onlineTransformed%>%
rename(`Brand Desc` = `BRAND_NAME`)%>%
rename(`Vendor Stk Nbr` = `CATLG_ITEM_ID`)%>%
rename(`Item Nbr` = `WM_ITEM_NUMBER (Dotcom)`)%>%
rename(UPC = WUPC)%>%
rename(`POS Qty` = `Net Units`)%>%
rename(`Total Customer Item Return` = `Return Units`)-> online_clean
#remove time from date field
online_clean$WeekStart <- as.Date(online_clean$WeekStart)
online_clean$WeekEnd <- as.Date(online_clean$WeekEnd)
#Create Online Data for skuByStore Merge
online_clean%>%
mutate(Gross_Unit = `POS Qty`*`Total Customer Item Return`)%>%
mutate(GrossPOS = Gross_Unit*(`POS Sales`/`POS Qty`))%>%
rename(Return_Unit = `Total Customer Item Return`)%>%
rename(Net_Sales = `POS Sales`)%>%
rename(Net_Unit = `POS Qty`)%>%
dplyr::select(WeekStart, `WM Week`, WeekEnd, `Store Nbr`, `Item Nbr`, UPC, Net_Unit, Net_Sales, Gross_Unit, Return_Unit, `Curr Str On Hand Qty`,
`Curr Instock %`, `Curr Str On Order Qty`, `Curr Str In Transit Qty`, GrossPOS) -> skuByOnline
#replace missing/infinite values with 0
skuByOnline$GrossPOS[is.na(skuByOnline$GrossPOS)] <- 0
skuByOnline$GrossPOS[is.infinite(skuByOnline$GrossPOS)] <- 0
#create column index
cols.num <- c(3,4,9:13, 15,16)
#prep for merge, make sure columns have same class
sales_pvt[cols.num] <- sapply(sales_pvt[cols.num],as.numeric)
sales_pvt[7] <- sapply(sales_pvt[7],as.character)
online_clean[cols.num] <- sapply(online_clean[cols.num],as.numeric)
online_clean$`Vendor Stk Nbr`<- as.character(online_clean$`Vendor Stk Nbr`)
#merge
tot_sales <- bind_rows(sales_pvt, online_clean)
#prep data for merge
skuByOnline[c(2,4)] <- sapply(skuByOnline[c(2,4)],as.character)
#Merge Store by Sku and Online by Sku
skuByStoreClean <- bind_rows(skuByStore,skuByOnline)
#create column index
cols.num.inv <- c(1,5,7:14)
#prep for merge, make sure columns have same class
inventory[cols.num.inv] <- sapply(inventory[cols.num.inv],as.numeric)
inventory%>%
group_by(`WM Week`, `Brand Desc`, `Vendor Stk Nbr`, `Item Nbr`, `Item Flags`, `UPC`)%>%
summarise()
#create in store inv
inventory%>%
rename(WMT = `Item Nbr`)%>%
group_by(WMT)%>%
summarise(`Curr Str On Hand Qty` = sum(`Curr Str On Hand Qty`))->store_oh
#check for missing SKUs
missingSkus <- c()
for(line in store_oh$WMT){
if(line %in% store_inv_sku$WMT){
#nothing
}else{
missingSkus <- c(missingSkus, line)
newSku <- data.frame()
}
}
#
for (value in missingSkus) {
store_oh%>%
filter(WMT == value)%>%
dplyr::select(WMT)-> skuSub
newSku <- bind_rows(newSku, skuSub)
}
if(length(missingSkus) > 0){
write.xlsx(newSku, here("data", "newStoreSKU.xlsx", sep = ""), overwrite = TRUE)
{stop(length(missingSkus), " new SKU values! Copy new SKUs to store_inv_sku.xlsx and rerun code")}
}
#merge with WMT# inv reference data
store_inv_sku$WMT <- as.character(store_inv_sku$WMT)
store_inv <- left_join(store_inv_sku, store_oh, by = "WMT")
#Replace NA with 0
store_inv$`Curr Str On Hand Qty`[is.na(store_inv$`Curr Str On Hand Qty`)] <- 0
#repeat for online inventory
online%>%
rename(WMT = `WM_ITEM_NUMBER (Dotcom)`)%>%
rename(`Curr Str On Hand Qty` = OH)%>%
select(WMT, `Curr Str On Hand Qty`)->online_oh
online_oh$WMT <- gsub("[[:space:]]", "", online_oh$WMT)
online_oh$WMT <- as.numeric(online_oh$WMT)
#check for missing SKUs
missingSkus <- c()
for(line in online_oh$WMT){
if(line %in% online_inv_sku$WMT){
#nothing
}else{
missingSkus <- c(missingSkus, line)
newSku <- data.frame()
}
}
#
for (value in missingSkus) {
online_oh%>%
filter(WMT == value)%>%
dplyr::select(WMT)-> skuSub
newSku <- bind_rows(newSku, skuSub)
}
if(length(missingSkus) > 0){
write.xlsx(newSku, here("data", "newInvSKU.xlsx", sep = ""), overwrite = TRUE)
{stop(length(missingSkus), " new SKU values! Copy new SKUs to online_inv_sku.xlsx from newInvSKU.xlsx and rerun code")}
}
online_inv <- left_join(online_inv_sku, online_oh, by = "WMT")
online_inv$`Curr Str On Hand Qty`[is.na(online_inv$`Curr Str On Hand Qty`)] <- 0
#merge data
online_inv$WMT <- as.character(online_inv$WMT)
inv_tot <- bind_rows(store_inv, online_inv)
#create gross_unit by WMT# data
tot_sales%>%
mutate(gross_unit = `POS Qty`+`Total Customer Item Return`)%>%
rename(WMT = `Item Nbr`)%>%
select(WMT, gross_unit, `Store Nbr`) -> sku_month
for (storeType in c(0,99999)) {
checkSku <- filter(sku_month, `Store Nbr` == storeType)
#check for missing SKUs
missingSkus <- c()
for(line in checkSku$WMT){
line <- str_trim(line)
if(line %in% store_sales_sku$WMT){
#nothing
}else{
missingSkus <- c(missingSkus, line)
newSku <- data.frame()
}
}
#
for (value in missingSkus) {
checkSku%>%
filter(WMT == value)-> skuSub
newSku <- bind_rows(newSku, skuSub)
}
if(length(missingSkus) > 0){
write.xlsx(newSku, here("data", "newSalesSKU.xlsx", sep = ""), overwrite = TRUE)
{stop(length(missingSkus), " new SKU values in store ", storeType, "! Copy new SKUs from newSalesSKU.xlsx to store_sales_sku.xlsx and rerun code")}
}
}
store_sales_sku$WMT <- as.character(store_sales_sku$WMT)
#merge with WMT# sales reference data
tot_sales_sku <- left_join(store_sales_sku, sku_month, by = "WMT")
#Replace NA with 0
tot_sales_sku$gross_unit[is.na(tot_sales_sku$gross_unit)] <- 0
# Create a blank workbook
store_wb <- createWorkbook()
# Add some sheets to the workbook
addWorksheet(store_wb, "Sales")
addWorksheet(store_wb, "Pivot")
addWorksheet(store_wb, "Raw Data")
addWorksheet(store_wb, "Inventory")
addWorksheet(store_wb, "Store Data")
addWorksheet(store_wb, "SKU Inv Monthly")
addWorksheet(store_wb, "SKU Monthly")
addWorksheet(store_wb, "SKU by Store")
# Write the data to the sheets
writeData(store_wb, sheet = "Sales", x = tot_sales)
writeData(store_wb, sheet = "Pivot", x = sales_pvt)
writeData(store_wb, sheet = "Raw Data", x = raw_store)
writeData(store_wb, sheet = "Inventory", x = inventory)
writeData(store_wb, sheet = "Store Data", x = salesByStore)
writeData(store_wb, sheet = "SKU Inv Monthly", x = inv_tot)
writeData(store_wb, sheet = "SKU Monthly", x = tot_sales_sku)
writeData(store_wb, sheet = "SKU by Store", x = skuByStoreClean)
# Export the file
saveWorkbook(store_wb, here("results", params$year, month, paste("Week", params$wk, sep = ""), paste("Google Weekly Recap (Stores) - Week ", params$wk, ".xlsx", sep = "")), overwrite = TRUE)
# Create a blank workbook
online_wb <- createWorkbook()
# Add some sheets to the workbook
addWorksheet(online_wb, "Chromebooks")
addWorksheet(online_wb, "Sales")
# Write the data to the sheets
writeData(online_wb, sheet = "Chromebooks", x = online)
writeData(online_wb, sheet = "Sales", x = online_clean)
# Export the file
saveWorkbook(online_wb, here("results", params$year, month, paste("Week", params$wk, sep = ""), paste("Google Weekly Recap (dotcom) - Week ", params$wk, ".xlsx", sep = "")), overwrite = TRUE)
#Merge Online w/SKU Level Sales by store
onlineTransformed%>%
rename(`Item Nbr` = `WM_ITEM_NUMBER (Dotcom)`)%>%
rename(UPC = WUPC)%>%
rename(Net_Unit = `Net Units`)%>%
rename(Net_Sales = `POS Sales`)%>%
rename(Return_Unit = `Return Units`)-> onlineSalesBySku
onlineSalesBySku%>%
mutate(Gross_Unit = Net_Unit+Return_Unit)%>%
mutate(NetASP = Net_Sales/Net_Unit)%>%
mutate(GrossPOS = Gross_Unit*NetASP) -> onlineSalesBySku
onlineSalesBySku$GrossPOS[is.na(onlineSalesBySku$GrossPOS)] <- 0
onlineSalesBySku$GrossPOS[is.infinite(onlineSalesBySku$GrossPOS)] <- 0
onlineSalesBySku <- dplyr::select(onlineSalesBySku, `WM Week`, WeekEnd, `Store Nbr`, `Item Nbr`, UPC, Net_Unit, Net_Sales, Gross_Unit, Return_Unit,`Curr Str On Hand Qty`, `Curr Instock %`, `Curr Str On Order Qty`, `Curr Str In Transit Qty`, GrossPOS)
onlineSalesBySku$`WM Week` <- as.character(onlineSalesBySku$`WM Week`)
onlineSalesBySku$`Store Nbr` <- as.character(onlineSalesBySku$`Store Nbr`)
skuByStoreBind <- dplyr::select(skuByStore, -WeekStart)
weeklySales <- bind_rows(skuByStoreBind, onlineSalesBySku)
skuLevelStorelist <- dplyr::select(storelist, StoreNumber, PilotStoreType, Region, Market, Pair)
weeklySales <- left_join(weeklySales, skuLevelStorelist, by = c("Store Nbr" = "StoreNumber"))
#Upload To Monthly Tracker
lastWeekData <- read_sheet(params$monthlyTracker, "Weekly Sales")
if(is.na(unique(lastWeekData$`WM Week`))){
print("Sheet is empty")}else if (unique(lastWeekData$`WM Week`) != this_week$`WM Week`){
write_sheet(lastWeekData, params$monthlyTracker, "Previous Week Sales")
}
View(skuByStore)
View(skuByOnline)
#Merge Store by Sku and Online by Sku
skuByStoreClean <- bind_rows(skuByStore,skuByOnline)
